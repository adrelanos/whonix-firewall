#!/bin/bash

## Copyright (C) 2012 - 2015 Patrick Schleizer <adrelanos@riseup.net>
## Copyright (C) 2014 - 2015 Jason Mehring <nrgaway@gmail.com>
## See the file COPYING for copying conditions.

###########################
## debugging
###########################

#set -x

###########################
## error_handler
###########################

set -o pipefail

error_handler() {
  echo "##################################################"
  echo "Whonix firewall script failed!"
  echo "##################################################"
  exit 1
}

trap "error_handler" ERR

###########################
## source config folder
###########################

shopt -s nullglob
for i in /etc/whonix_firewall.d/*.conf /rw/config/whonix_firewall.d/*.conf; do
   bash_n_exit_code="0"
   bash_n_output="$(bash -n "$i" 2>&1)" || { bash_n_exit_code="$?" ; true; };
   if [ ! "$bash_n_exit_code" = "0" ]; then
      echo "Invalid config file: $i
bash_n_exit_code: $bash_n_exit_code
bash_n_output:
$bash_n_output" >&2
      exit 1
   fi
   source "$i"
done

###########################
## comments
###########################

## --reject-with
## http://ubuntuforums.org/showthread.php?p=12011099

## Set to icmp-admin-prohibited because icmp-port-unreachable caused
## confusion. icmp-port-unreachable looks like a bug while
## icmp-admin-prohibited hopefully makes clear it is by design.

###########################
## /usr/bin/whonix_firewall
###########################

echo "OK: Loading Whonix firewall..."

[ -n "$iptables_cmd" ] || iptables_cmd="iptables --wait"
[ -n "$ip6tables_cmd" ] || ip6tables_cmd="ip6tables --wait"

###########################
## USERS
###########################

## {{ setting the following USER ID variables

## USER_ID_clearnet
## USER_ID_debian_tor
## USER_ID_root
## USER_ID_tunnel
## USER_ID_user

[ -n "$USER_CHECK_LIST" ] || USER_CHECK_LIST="debian-tor clearnet user root tunnel $USER_CHECK_LIST_EXTENSION"

for user_check_list_item_original in $USER_CHECK_LIST ; do
   user_check_list_item_without_dashes="$user_check_list_item_original"
   user_check_list_item_without_dashes="$(echo "$user_check_list_item_without_dashes" | sed 's/-/_/g')"
   id -u "$user_check_list_item_original" >/dev/null
   eval USER_ID_${user_check_list_item_without_dashes}="$(id -u "$user_check_list_item_original")"
   #echo "OK: USER_ID_${user_check_list_item_without_dashes}: $(eval echo \$USER_ID_${user_check_list_item_without_dashes})"
done

## }}

USER_LIST="$(compgen -v | grep USER\_ID\_)"

## Get Tor username, distro specific!
[ -n "$TOR_USER" ] || TOR_USER="$USER_ID_debian_tor"

## Get user uids.
[ -n "$CLEARNET_USER" ] || CLEARNET_USER="$USER_ID_clearnet"
[ -n "$USER_USER" ] || USER_USER="$USER_ID_user"
[ -n "$ROOT_USER" ] || ROOT_USER="$USER_ID_root"
[ -n "$TUNNEL_USER" ] || TUNNEL_USER="$USER_ID_tunnel"

echo "OK: TOR_USER: $TOR_USER"
echo "OK: CLEARNET_USER: $CLEARNET_USER"
echo "OK: USER_USER: $USER_USER"
echo "OK: ROOT_USER: $ROOT_USER"
echo "OK: ROOT_USER: $TUNNEL_USER"

###########################
## NO_NAT_USERS
###########################

## No NAT for clearnet user.
NO_NAT_USERS+="$CLEARNET_USER"

## No NAT for user user.
## DISABLED BY DEFAULT. For testing/debugging only.
if [ "$ALLOW_GATEWAY_USER_USER" = "1" ]; then
   NO_NAT_USERS+="$USER_USER"
fi

## No NAT for root user.
## DISABLED BY DEFAULT. For testing/debugging only.
if [ "$ALLOW_GATEWAY_ROOT_USER" = "1" ]; then
   NO_NAT_USERS+="$ROOT_USER"
fi

## No NAT for Tor itself,
## unless VPN_FIREWALL mode is enabled.
if [ "$VPN_FIREWALL" = "1" ]; then
   true
else
   NO_NAT_USERS+="$TOR_USER"
fi

###########################
## interfaces
###########################

if [ -d "/usr/lib/qubes" ]; then
   [ -n "$qubes_vm_type" ] || qubes_vm_type="$(qubesdb-read /qubes-vm-type)"
   [ -n "$INT_IF" ] || INT_IF="vif+"
   [ -n "$INT_TIF" ] || INT_TIF="vif+"
fi

## External interface
[ -n "$EXT_IF" ] || EXT_IF="eth0"
## Internal interface
[ -n "$INT_IF" ] || INT_IF="eth1"
## Internal "tunnel" interface, usually the same as
## the Internal interface unless using vpn tunnels
## between workstations and gateway
[ -n "$INT_TIF" ] || INT_TIF="eth1"

###########################
## NON_TOR_GATEWAY
###########################

if [ "$NON_TOR_GATEWAY" = "" ]; then
   if [ -d "/usr/lib/qubes" ]; then
      NON_TOR_GATEWAY="\
         127.0.0.0-127.0.0.24 \
         10.137.0.0-10.138.255.255 \
      "
   else
      ## 10.0.2.2-10.0.2.24: VirtualBox DHCP
      NON_TOR_GATEWAY="\
         127.0.0.0-127.0.0.24 \
         192.168.0.0-192.168.0.24 \
         192.168.1.0-192.168.1.24 \
         10.152.152.0-10.152.152.24 \
         10.0.2.2-10.0.2.24 \
      "
   fi
fi

################
## VPN related #
################

[ -n "$VPN_INTERFACE" ] || VPN_INTERFACE="tun0"

## Destinations you do not routed through VPN, only for Whonix-Gateway.
if [ "$LOCAL_NET" = "" ]; then
   if [ -d "/usr/lib/qubes" ]; then
      LOCAL_NET="\
         127.0.0.0-127.0.0.24 \
         10.137.0.0-10.138.255.255 \
      "
   else
      ## 10.0.2.2/24: VirtualBox DHCP
      LOCAL_NET="\
         127.0.0.0-127.0.0.24 \
         192.168.0.0-192.168.0.24 \
         192.168.1.0-192.168.1.24 \
         10.152.152.0-10.152.152.24 \
         10.0.2.2-10.0.2.24 \
      "
   fi
fi

###########################
## ports
###########################

## The following ports are used
## - here in /usr/bin/whonix_firewall (package: whonix-gw-firewall)
## - by Tor in /usr/share/tor/tor-service-defaults-torrc (package: anon-gw-anonymizer-config)
##
## The following applications will be separated, preventing identity
## correlation through circuit sharing.

## Transparent Proxy Ports for Whonix-Workstation
[ -n "$TRANS_PORT_WORKSTATION" ] || TRANS_PORT_WORKSTATION="9040"
[ -n "$DNS_PORT_WORKSTATION" ] || DNS_PORT_WORKSTATION="5300"

## Transparent Proxy Ports for Whonix-Gateway
[ -n "$TRANS_PORT_GATEWAY" ] || TRANS_PORT_GATEWAY="9041"
[ -n "$DNS_PORT_GATEWAY" ] || DNS_PORT_GATEWAY="5400"

## Control Port Filter Proxy Port
[ -n "$CONTROL_PORT_FILTER_PROXY_PORT" ] || CONTROL_PORT_FILTER_PROXY_PORT="9052"

## Flash Proxy Port
[ -n "$FLASHPROXY_PORT" ] || FLASHPROXY_PORT="9000"

## Socks Ports for per application circuits.
[ -n "$SOCKS_PORT_TOR_DEFAULT" ] || SOCKS_PORT_TOR_DEFAULT="9050"
[ -n "$SOCKS_PORT_TB" ] || SOCKS_PORT_TB="9100"
[ -n "$SOCKS_PORT_IRC" ] || SOCKS_PORT_IRC="9101"
[ -n "$SOCKS_PORT_TORBIRDY" ] || SOCKS_PORT_TORBIRDY="9102"
[ -n "$SOCKS_PORT_IM" ] || SOCKS_PORT_IM="9103"
[ -n "$SOCKS_PORT_APT_GET" ] || SOCKS_PORT_APT_GET="9104"
[ -n "$SOCKS_PORT_GPG" ] || SOCKS_PORT_GPG="9105"
[ -n "$SOCKS_PORT_SSH" ] || SOCKS_PORT_SSH="9106"
[ -n "$SOCKS_PORT_GIT" ] || SOCKS_PORT_GIT="9107"
[ -n "$SOCKS_PORT_SDWDATE" ] || SOCKS_PORT_SDWDATE="9108"
[ -n "$SOCKS_PORT_WGET" ] || SOCKS_PORT_WGET="9109"
[ -n "$SOCKS_PORT_WHONIXCHECK" ] || SOCKS_PORT_WHONIXCHECK="9110"
[ -n "$SOCKS_PORT_BITCOIN" ] || SOCKS_PORT_BITCOIN="9111"
[ -n "$SOCKS_PORT_PRIVOXY" ] || SOCKS_PORT_PRIVOXY="9112"
[ -n "$SOCKS_PORT_POLIPO" ] || SOCKS_PORT_POLIPO="9113"
[ -n "$SOCKS_PORT_WHONIX_NEWS" ] || SOCKS_PORT_WHONIX_NEWS="9114"
[ -n "$SOCKS_PORT_TBB_DOWNLOAD" ] || SOCKS_PORT_TBB_DOWNLOAD="9115"
[ -n "$SOCKS_PORT_TBB_GPG" ] || SOCKS_PORT_TBB_GPG="9116"
[ -n "$SOCKS_PORT_CURL" ] || SOCKS_PORT_CURL="9117"
[ -n "$SOCKS_PORT_RSS" ] || SOCKS_PORT_RSS="9118"
[ -n "$SOCKS_PORT_TORCHAT" ] || SOCKS_PORT_TORCHAT="9119"
[ -n "$SOCKS_PORT_MIXMASTERUPDATE" ] || SOCKS_PORT_MIXMASTERUPDATE="9120"
[ -n "$SOCKS_PORT_MIXMASTER" ] || SOCKS_PORT_MIXMASTER="9121"
[ -n "$SOCKS_PORT_KDE" ] || SOCKS_PORT_KDE="9122"
[ -n "$SOCKS_PORT_GNOME" ] || SOCKS_PORT_GNOME="9123"
[ -n "$SOCKS_PORT_APTITUDE" ] || SOCKS_PORT_APTITUDE="9124"
[ -n "$SOCKS_PORT_YUM" ] || SOCKS_PORT_YUM="9125"
[ -n "$SOCKS_PORT_TBB_DEFAULT" ] || SOCKS_PORT_TBB_DEFAULT="9150"

## Adding more Socks Ports here should no longer be necessary.
## There are already lots of custom ports prepared. If you need more
## anyway, read below.
## Please read:
## https://www.whonix.org/wiki/Stream_Isolation
##
## Additional Socks Ports for per application circuits could be
## added here, but you would have to edit:
## - /etc/tor/torrc
## - And "sudo service tor@default reload" afterwards.
## - /usr/bin/whonix_firewall
## - And issue "sudo /usr/bin/whonix_firewall" afterwards.

socks_ports_list="$(compgen -v | grep SOCKS\_PORT\_)"

###########################
## IPv4 DEFAULTS
###########################

## Set secure defaults.
$iptables_cmd -P INPUT DROP

## FORWARD rules does not actually do anything if forwarding is disabled. Better be safe just in case.
$iptables_cmd -P FORWARD DROP

## Only the Tor process is allowed to establish outgoing connections.
$iptables_cmd -P OUTPUT DROP

###########################
## IPv4 PREPARATIONS
###########################

## Flush old rules.
$iptables_cmd -F
$iptables_cmd -X
$iptables_cmd -t nat -F
$iptables_cmd -t nat -X
$iptables_cmd -t mangle -F
$iptables_cmd -t mangle -X

######################################
## IPv4 DROP INVALID INCOMING PACKAGES
######################################

## DROP INVALID
$iptables_cmd -A INPUT -m conntrack --ctstate INVALID -j DROP
$iptables_cmd -A INPUT -m state --state INVALID -j DROP

## DROP INVALID SYN PACKETS
$iptables_cmd -A INPUT -p tcp --tcp-flags ALL ACK,RST,SYN,FIN -j DROP
$iptables_cmd -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
$iptables_cmd -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j DROP

## DROP PACKETS WITH INCOMING FRAGMENTS. THIS ATTACK ONCE RESULTED IN KERNEL PANICS
$iptables_cmd -A INPUT -f -j DROP

## DROP INCOMING MALFORMED XMAS PACKETS
$iptables_cmd -A INPUT -p tcp --tcp-flags ALL ALL -j DROP

## DROP INCOMING MALFORMED NULL PACKETS
$iptables_cmd -A INPUT -p tcp --tcp-flags ALL NONE -j DROP

######################################
## QUBES
######################################

if [ "$qubes_vm_type" = "NetVM" ] || [ "$qubes_vm_type" = "ProxyVM" ]; then
   ## Allow connections from port 8082 of internal vif interface for tinyproxy
   ## tinyproxy is responsible to handle TemplateVMs updates.
   $iptables_cmd -A INPUT -i "$INT_IF" -p tcp -m tcp --dport 8082 -j ACCEPT
   $iptables_cmd -A OUTPUT -o "$INT_IF" -p tcp -m tcp --sport 8082 -j ACCEPT

   ## Qubes pre-routing. Will be able to intercept traffic destined for
   ## 10.137.255.254 to be re-routed to tinyproxy.
   $iptables_cmd -t nat -N PR-QBS-SERVICES
   $iptables_cmd -t nat -A PREROUTING -j PR-QBS-SERVICES

   ## Redirects traffic destined for 10.137.255.154 to port 8082 (tinyproxy).
   $iptables_cmd -t nat -A PR-QBS-SERVICES -d 10.137.255.254/32 -i "$INT_IF" -p tcp -m tcp --dport 8082 -j REDIRECT

   ## Forward tinyproxy output to port 5300/9040 on internal (Tor) interface (eth1) to be
   ## able to connect to Internet (via Tor) to proxy updates for TemplateVM.
   $iptables_cmd -t nat -A OUTPUT -p udp -m owner --uid-owner tinyproxy -m conntrack --ctstate NEW -j DNAT --to "127.0.0.1:${DNS_PORT_GATEWAY}"
   $iptables_cmd -t nat -A OUTPUT -p tcp -m owner --uid-owner tinyproxy -m conntrack --ctstate NEW -j DNAT --to "127.0.0.1:${TRANS_PORT_GATEWAY}"
fi

if [ "$qubes_vm_type" = "TemplateVM" ]; then
   ## Allow access to Qubes update proxy.
   $iptables_cmd -A OUTPUT -o "$EXT_IF" -p tcp -m tcp --dport 8082 -j ACCEPT
fi

###########################
## IPv4 INPUT
###########################

## Traffic on the loopback interface is accepted.
$iptables_cmd -A INPUT -i lo -j ACCEPT

## Established incoming connections are accepted.
$iptables_cmd -A INPUT -m state --state ESTABLISHED -j ACCEPT

## Drop all incoming ICMP traffic by default.
## All incoming connections are dropped by default anyway, but should a user
## allow incoming ports (such as for incoming SSH or FlashProxy), ICMP should
## still be dropped to filter for example ICMP time stamp requests.
if [ ! "$GATEWAY_ALLOW_INCOMING_ICMP" = "1" ]; then
   $iptables_cmd -A INPUT -p icmp -j DROP
fi

## Allow all incoming connections on the virtual VPN network interface,
## when VPN_FIREWALL mode is enabled.
## DISABLED BY DEFAULT.
if [ "$VPN_FIREWALL" = "1" ]; then
   $iptables_cmd -A INPUT -i "$VPN_INTERFACE" -j ACCEPT
fi

for ext_if_item in $EXT_IF; do
   ## Allow incoming SSH connections on the external interface.
   ## DISABLED BY DEFAULT. For testing/debugging only.
   if [ "$GATEWAY_ALLOW_INCOMING_SSH" = "1" ]; then
      $iptables_cmd -A INPUT -i "$ext_if_item" -p tcp --dport 22 -j ACCEPT
   fi

   ## Allow incoming Flash Proxy connections on the external interface.
   ## This has NOTHING to do with Adobe Flash.
   ## DISABLED BY DEFAULT.
   if [ "$GATEWAY_ALLOW_INCOMING_FLASHPROXY" = "1" ]; then
      $iptables_cmd -A INPUT -i "$ext_if_item" -p tcp --dport "$FLASHPROXY_PORT" -j ACCEPT
   fi

   ## Allow incoming DIRPORT connections for an optional Tor relay.
   ## DISABLED BY DEFAULT.
   if [ "$GATEWAY_ALLOW_INCOMING_DIR_PORT" = "1" ]; then
      $iptables_cmd -A INPUT -i "$ext_if_item" -p tcp --dport "$DIR_PORT" -j ACCEPT
   fi

   ## Allow incoming ORPORT connections for an optional Tor relay.
   ## DISABLED BY DEFAULT.
   if [ "$GATEWAY_ALLOW_INCOMING_OR_PORT" = "1" ]; then
      $iptables_cmd -A INPUT -i "$ext_if_item" -p tcp --dport "$OR_PORT" -j ACCEPT
   fi

   ## Custom Open Ports on external interface
   ## - untested, should work
   ## - Replace 22,9050,9051,9150,9151 with any ports you like to be open, example: 9050,9051
   ##   or just 9050
   ## - $iptables_cmd v1.4.14: multiport needs -p tcp, -p udp, -p udplite, -p sctp or -p dccp
   #$iptables_cmd -A INPUT -i "$ext_if_item" -p tcp --match multiport --dports 22,9050,9051,9150,9151 -j ACCEPT
   #$iptables_cmd -A INPUT -i "$ext_if_item" -p udp --match multiport --dports 22,9050,9051,9150,9151 -j ACCEPT

   ## OPTIONAL Allow incoming OpenVPN connections on the external interface.
   #$iptables_cmd -A INPUT -i "$ext_if_item" -p tcp --dport 1194 -j ACCEPT
done

for int_tif_item in $INT_TIF; do
   if [ "$WORKSTATION_TRANSPARENT_DNS" = "1" ]; then
      ## Allow DNS traffic to DnsPort.
      $iptables_cmd -A INPUT -i "$int_tif_item" -p udp --dport "$DNS_PORT_WORKSTATION" -j ACCEPT
   fi
done

for int_if_item in $INT_IF; do
   if [ "$WORKSTATION_TRANSPARENT_TCP" = "1" ]; then
      ## Allow TCP traffic TransPort.
      $iptables_cmd -A INPUT -i "$int_if_item" -p tcp --dport "$TRANS_PORT_WORKSTATION" -j ACCEPT
   fi
done

for int_tif_item in $INT_TIF; do
   ## Allow TCP traffic to Control Port Filter Proxy.
   if [ "$CONTROL_PORT_FILTER_PROXY_ENABLE" = "1" ]; then
      $iptables_cmd -A INPUT -i "$int_tif_item" -p tcp --dport "$CONTROL_PORT_FILTER_PROXY_PORT" -j ACCEPT
   fi

   ## Allow socksified applications.
   if [ "$WORKSTATION_ALLOW_SOCKSIFIED" = "1" ]; then
      for socks_port in $socks_ports_list; do
         true "$socks_port: ${!socks_port}"
         $iptables_cmd -A INPUT -i "$int_tif_item" -p tcp --dport "${!socks_port}" -j ACCEPT
      done

      ## Accept ports 9152-9189 prepared for user custom applications. See /etc/tor/torrc for more comments.
      $iptables_cmd -A INPUT -i "$int_tif_item" -p tcp --match multiport --dports 9152:9189 -j ACCEPT
   fi
done

for int_if_item in $INT_IF; do
   ## Redirect Control Port Filter Proxy to Control Port Filter Proxy port.
   if [ "$CONTROL_PORT_FILTER_PROXY_ENABLE" = "1" ]; then
      $iptables_cmd -t nat -A PREROUTING -i "$int_if_item" -p tcp --dport "$CONTROL_PORT_FILTER_PROXY_PORT" -j REDIRECT --to-ports "$CONTROL_PORT_FILTER_PROXY_PORT"
   fi
done

for int_if_item in $INT_IF; do
   if [ "$WORKSTATION_ALLOW_SOCKSIFIED" = "1" ]; then
      for socks_port in $socks_ports_list; do
         true "$socks_port: ${!socks_port}"
         ## Redirect Browser/IRC/TorBirdy, etc. to SocksPort.
         $iptables_cmd -t nat -A PREROUTING -i "$int_if_item" -p tcp --dport "${!socks_port}" -j REDIRECT --to-ports "${!socks_port}"
      done

      for port_number_temp in $(seq 9152 9189); do
         ## Redirect ports 9152-9189 prepared for user custom applications.
         $iptables_cmd -t nat -A PREROUTING -i "$int_if_item" -p tcp --dport "$port_number_temp" -j REDIRECT --to-ports "$port_number_temp"
      done
   fi

   if [ "$WORKSTATION_TRANSPARENT_DNS" = "1" ]; then
      ## Redirect remaining DNS traffic to DNS_PORT_WORKSTATION.
      ## Only user installed applications not configured to use a SocksPort are affected.
      $iptables_cmd -t nat -A PREROUTING -i "$int_if_item" -p udp --dport 53 -j REDIRECT --to-ports "$DNS_PORT_WORKSTATION"
   fi

   if [ "$WORKSTATION_TRANSPARENT_TCP" = "1" ]; then
      ## Catch all remaining TCP and redirect to TransPort.
      ## Only user installed applications not configured to use a SocksPort are affected.
      $iptables_cmd -t nat -A PREROUTING -i "$int_if_item" -p tcp --syn -j REDIRECT --to-ports "$TRANS_PORT_WORKSTATION"

      ## Optionally restrict TransPort.
      ## Replace above rule with a more restrictive one, e.g.:
      #$iptables_cmd -t nat -A PREROUTING -i "$int_if_item" -p tcp --match multiport --dports 80,443 --syn -j REDIRECT --to-ports "$TRANS_PORT_WORKSTATION"
   fi
done

## Log.
#$iptables_cmd -A INPUT -j LOG --log-prefix "Whonix blocked input4: "

## Reject anything not explicitly allowed above.
## Drop is better than reject here, because we do not want to reveal it's a Whonix-Gateway.
## (In case someone running Whonix-Gateway on bare metal.)
$iptables_cmd -A INPUT -j DROP

###########################
## IPv4 FORWARD
###########################

## Log.
#$iptables_cmd -A FORWARD -j LOG --log-prefix "Whonix blocked forward4: "

## Reject everything.
$iptables_cmd -A FORWARD -j REJECT --reject-with icmp-admin-prohibited

########################################
## IPv4 REJECT INVALID OUTGOING PACKAGES
########################################

## Drop invalid outgoing packages,
## unless NO_REJECT_INVALID_OUTGOING_PACKAGES is set to 1.
if [ ! "$NO_REJECT_INVALID_OUTGOING_PACKAGES" = "1" ]; then
   ## https://lists.torproject.org/pipermail/tor-talk/2014-March/032507.html
   $iptables_cmd -A OUTPUT -m conntrack --ctstate INVALID -j REJECT --reject-with icmp-admin-prohibited
   $iptables_cmd -A OUTPUT -m state --state INVALID -j REJECT --reject-with icmp-admin-prohibited
   #$iptables_cmd -A OUTPUT ! -o lo ! -d 127.0.0.1 ! -s 127.0.0.1 -p tcp -m tcp --tcp-flags ACK,FIN ACK,FIN -j REJECT --reject-with icmp-admin-prohibited
   #$iptables_cmd -A OUTPUT ! -o lo ! -d 127.0.0.1 ! -s 127.0.0.1 -p tcp -m tcp --tcp-flags ACK,RST ACK,RST -j REJECT --reject-with icmp-admin-prohibited

   ## DROP INVALID SYN PACKETS
   $iptables_cmd -A OUTPUT -p tcp --tcp-flags ALL ACK,RST,SYN,FIN -j REJECT --reject-with icmp-admin-prohibited
   $iptables_cmd -A OUTPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j REJECT --reject-with icmp-admin-prohibited
   $iptables_cmd -A OUTPUT -p tcp --tcp-flags SYN,RST SYN,RST -j REJECT --reject-with icmp-admin-prohibited

   ## DROP PACKETS WITH INCOMING FRAGMENTS. THIS ATTACK ONCE RESULTED IN KERNEL PANICS
   $iptables_cmd -A OUTPUT -f -j REJECT --reject-with icmp-admin-prohibited

   ## DROP INCOMING MALFORMED XMAS PACKETS
   $iptables_cmd -A OUTPUT -p tcp --tcp-flags ALL ALL -j REJECT --reject-with icmp-admin-prohibited

   ## DROP INCOMING MALFORMED NULL PACKETS
   $iptables_cmd -A OUTPUT -p tcp --tcp-flags ALL NONE -j REJECT --reject-with icmp-admin-prohibited
fi

###########################
## IPv4 OUTPUT
###########################

## Allow outgoing traffic on VPN interface,
## if VPN_FIREWALL mode is enabled.
## DISABLED BY DEFAULT.
if [ "$VPN_FIREWALL" = "1" ]; then
   $iptables_cmd -A OUTPUT -o "$VPN_INTERFACE" -j ACCEPT
fi

for no_nat_user in $NO_NAT_USERS ; do
   $iptables_cmd -t nat -A OUTPUT -m owner --uid-owner "$no_nat_user" -j RETURN
done

## Redirect of Gateway DNS traffic to DNS_PORT_GATEWAY.
## DISABLED BY DEFAULT. default. Using SocksPort instead.
if [ "$GATEWAY_TRANSPARENT_DNS" = "1" ]; then
   $iptables_cmd -t nat -A OUTPUT -p udp --dport 53 -j REDIRECT --to-ports "$DNS_PORT_GATEWAY"
fi

## Exclude connections to local network, Whonix-Workstation, VirtualBox from being redirected through Tor,
## unless VPN_FIREWALL mode is enabled.
## ENABLED BY DEFAULT.
if [ ! "$VPN_FIREWALL" = "1" ]; then
   for NET in $NON_TOR_GATEWAY; do
      $iptables_cmd -t nat -A OUTPUT -m iprange --dst-range "$NET" -j RETURN
   done
fi

## Redirect all Gateway TCP traffic to TRANS_PORT_GATEWAY.
## DISABLED BY DEFAULT. Using SocksPort instead.
if [ "$GATEWAY_TRANSPARENT_TCP" = "1" ]; then
   $iptables_cmd -t nat -A OUTPUT -p tcp --syn -j REDIRECT --to-ports "$TRANS_PORT_GATEWAY"
fi

## Existing connections are accepted.
$iptables_cmd -A OUTPUT -m state --state ESTABLISHED -j ACCEPT

## Accept outgoing connections to local network, Whonix-Workstation and VirtualBox,
## unless VPN_FIREWALL mode is enabled.
## ENABLED BY DEFAULT.
if [ ! "$VPN_FIREWALL" = "1" ]; then
   for NET in $NON_TOR_GATEWAY; do
      $iptables_cmd -A OUTPUT -m iprange --dst-range "$NET" -j ACCEPT
   done
fi

## Accept outgoing connections to local network,
## when VPN_FIREWALL mode is enabled.
## DISABLED BY DEFAULT.
if [ "$VPN_FIREWALL" = "1" ]; then
   for NET in $LOCAL_NET; do
      $iptables_cmd -A OUTPUT -m iprange --dst-range "$NET" -j ACCEPT
   done
fi

for no_nat_user in $NO_NAT_USERS ; do
   $iptables_cmd -A OUTPUT -m owner --uid-owner "$no_nat_user" -j ACCEPT
fi

## Log.
#$iptables_cmd -A OUTPUT -j LOG --log-prefix "Whonix blocked output4: "

## Reject all other outgoing traffic.
$iptables_cmd -A OUTPUT -j REJECT --reject-with icmp-admin-prohibited

###########################
## IPv6
###########################

## Policy DROP for all traffic as fallback.
$ip6tables_cmd -P INPUT DROP
$ip6tables_cmd -P OUTPUT DROP
$ip6tables_cmd -P FORWARD DROP

## Flush old rules.
$ip6tables_cmd -F
$ip6tables_cmd -X
$ip6tables_cmd -t mangle -F
$ip6tables_cmd -t mangle -X

## Allow unlimited access on loopback.
## Not activated, since we do not need it.
#ip6tables_cmd -A INPUT -i lo -j ACCEPT
#ip6tables_cmd -A OUTPUT -o lo -j ACCEPT

## Log.
#ip6tables_cmd -A INPUT -j LOG --log-prefix "Whonix blocked input6: "
#ip6tables_cmd -A OUTPUT -j LOG --log-prefix "Whonix blocked output6: "
#ip6tables_cmd -A FORWARD -j LOG --log-prefix "Whonix blocked forward6: "

## Drop/reject all other traffic.
$ip6tables_cmd -A INPUT -j DROP
## --reject-with icmp-admin-prohibited not supported by ip6tables
$ip6tables_cmd -A OUTPUT -j REJECT
## --reject-with icmp-admin-prohibited not supported by ip6tables
$ip6tables_cmd -A FORWARD -j REJECT

###########################
## End
###########################

echo "OK: The firewall should not show any messages,"
echo "OK: besides output beginning with prefix OK:..."
echo "OK: Whonix firewall loaded."

exit 0
